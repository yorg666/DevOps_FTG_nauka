IaaS - infrastruktura jako usługa
Przykłady:
Amazon EC2
Google Compute Engine in the public cloud,
OpenStack for private clouds.

Określamy ilość potrzebnego CPU, RAMu i Dysku jakiego potrzebujemy w naszej maszynie a dostawca spina komputery przy użyciu predefiniowanej virtualnej konfiguracji sprzętowej i dostarcza to co chcemy
 
Nadal trzeba jednak samodzielnie zainstalować oprogramowanie, utrzymywać system operacyjny, pakiety, konfigurować sieć, czyli wykonywać całą pracę sysadmina.
 
SaaS - opogramowanie jako usługa
Przykłady:
Gmail
Salesforce
QuickBooks Online.

Zapisuję się na używanie jakiejś usługi i od razu mogę z niej korzystać, ale jestem ograniczony tym co dostawca usług pozwala mi robić, oraz są niewielkie możliwości customizacji.

PaaS - platforma jako usługa
Przykłady:
RED HAT OPENSHIFT - Red Hat OpenShift is an open-source enterprise PaaS (CEAP) that is not based on Cloud Foundry
APPRENDA  - Apprenda’s enterprise Platform as a Service (PaaS) for Java and .NET
PIVOTAL CF - Pivotal is a big data and application enterprise PaaS vendor that is owned by VMware
 
Platforma jako usługa jest "middleground" pomiędzy Infrastrukturą a oprogramowaniem jako usługą.
Na przykładzie OpenShifta za pomocą kilku poleceń jestem w stanie postawić platformę w postaci serwera,bazy danych,repozytorium Gitowego, i skonfigurowanej sieci.
Taką konfiguracją zajmuje się devops, developerzy dostają od gotowe środowisko do pracy.

Application
Typowo jest to aplikacja webowa, hostowana przez OpenShifta udostępnione porty HTTP 80, HTTPS 443, SSH 22 oraz WebSocket HTTP 8000 i HTTPS 8443

Gear
To inaczej serwer kontener który dostarcza zasobów do uruchamiania zdeployowanych na nim aplikacji.
W OpenShift gear działa w chmurze.
Są trzy typy gear 
small, 1GB dysk, 512GB RAM
medium, 1GB dysk, 1GB RAM
large 1GB dysk, 2GB RAM

Cartridge
Żeby Gear mógł działać należy dodać do niego cartridge które są pluginami które posiadają w sobie frameworki lub komponenty które mogą być użyte do uruchomenia aplikacji.
Gear może mieć zainstalowanych kilka cartridge a jeden i ten sam cartridge może działać na wielu gearach.

Są dwa rodzaje cartridge:

Standalone - są to serwery apliakcyjne lub języków które są skonfiguraowane tak żeby serwować stronę www.
Przykłady:
JBoss
Tomcat
Python
Node.js

Embedded - te dostarczają funkcjonalności, ale nie mogą być użyte samodzielnie do stworzenia aplikacji
Przykłady:
Baza Danych
Cron


Scalable application
Skalowalna apliakcja to taka która reaguje na zmianę w natężeniu ruchu i jeżeli jest taka potrzeba automatycznie alokuje potrzebne zasoby w celu obługi ruchu.
Przy wzmożonym ruchu automatycznie dodawane są nowe Geary z odpowiednio skonnfigurowanymi Cartridgami.
Kiedy ruch ulega zmniejszeniu, platforma wycofuje nadmiarowe zasoby czyli dezaktywuje nadmiarowe Geary.


Client tools, Web Console, Eclipse pluginami
Mogę się komunikować z platformą za pomocą RHC czyli narzędzi wiersza polecenia RED HATA, konsoli www lub pluginu w Eclipse.
Używam takiego połącznia żeby stworzyć nową aplikację lub dodać nowy cartridge. Reszta pracy odbywa się przez Git i SSH

CI/CD - Continuous Integration, Continuous Delivery 


Concepts and Types

Kubernetes and Origin help developers and operators build, test, and deploy
applications in a containerized cloud environment. Applications may be composed
of all of the components below, although most developers will be concerned with
Services, Deployments, and Builds for delivering changes.

Concepts:

* Containers:
    A definition of how to run one or more processes inside of a portable Linux
    environment. Containers are started from an Image and are usually isolated
    from other containers on the same machine.

* Image:
    A layered Linux filesystem that contains application code, dependencies,
    and any supporting operating system libraries. An image is identified by
    a name that can be local to the current cluster or point to a remote Docker
    registry (a storage server for images).

* Pods [pod]:
    A set of one or more containers that are deployed onto a Node together and
    share a unique IP and Volumes (persistent storage). Pods also define the
    security and runtime policy for each container.

* Labels:
    Labels are key value pairs that can be assigned to any resource in the
    system for grouping and selection. Many resources use labels to identify
    sets of other resources.

* Volumes:
    Containers are not persistent by default - on restart their contents are
    cleared. Volumes are mounted filesystems available to Pods and their
    containers which may be backed by a number of host-local or network
    attached storage endpoints. The simplest volume type is EmptyDir, which
    is a temporary directory on a single machine. Administrators may also
    allow you to request a Persistent Volume that is automatically attached
    to your pods.

* Nodes [node]:
    Machines set up in the cluster to run containers. Usually managed
    by administrators and not by end users.

* Services [svc]:
    A name representing a set of pods (or external servers) that are
    accessed by other pods. The service gets an IP and a DNS name, and can be
    exposed externally to the cluster via a port or a Route. It's also easy
    to consume services from pods because an environment variable with the
    name <SERVICE>_HOST is automatically injected into other pods.

* Routes [route]:
    A route is an external DNS entry (either a top level domain or a
    dynamically allocated name) that is created to point to a service so that
    it can be accessed outside the cluster. The administrator may configure
    one or more Routers to handle those routes, typically through an Apache
    or HAProxy load balancer / proxy.

* Replication Controllers [rc]:
    A replication controller maintains a specific number of pods based on a
    template that match a set of labels. If pods are deleted (because the
    node they run on is taken out of service) the controller creates a new
    copy of that pod. A replication controller is most commonly used to
    represent a single deployment of part of an application based on a
    built image.

* Deployment Configuration [dc]:
    Defines the template for a pod and manages deploying new images or
    configuration changes whenever those change. A single deployment
    configuration is usually analogous to a single micro-service. Can support
    many different deployment patterns, including full restart, customizable
    rolling updates, and fully custom behaviors, as well as pre- and post-
    hooks. Each deployment is represented as a replication controller.

* Build Configuration [bc]:
    Contains a description of how to build source code and a base image into a
    new image - the primary method for delivering changes to your application.
    Builds can be source based and use builder images for common languages like
    Java, PHP, Ruby, or Python, or be Docker based and create builds from a
    Dockerfile. Each build configuration has web-hooks and can be triggered
    automatically by changes to their base images.

* Image Streams and Image Stream Tags [is,istag]:
    An image stream groups sets of related images under tags - analogous to a
    branch in a source code repository. Each image stream may have one or
    more tags (the default tag is called "latest") and those tags may point
    at external Docker registries, at other tags in the same stream, or be
    controlled to directly point at known images. In addition, images can be
    pushed to an image stream tag directly via the integrated Docker
    registry.

* Projects [project]:
    All of the above resources (except Nodes) exist inside of a project.
    Projects have a list of members and their roles, like viewer, editor,
    or admin, as well as a set of security controls on the running pods, and
    limits on how many resources the project can use. The names of each
    resource are unique within a project. Developers may request projects
    be created, but administrators control the resources allocated to
    projects.

For more, see https://docs.openshift.com

Usage:
  oc types [options]

Examples:
  # View all projects you have access to
  $ oc get projects

  # See a list of all services in the current project
  $ oc get svc

  # Describe a deployment configuration in detail
  $ oc describe dc mydeploymentconfig

  # Show the images tagged into an image stream
  $ oc describe is ruby-centos7

Use "oc options" for a list of global command-line options (applies to all commands).

C:\Users\knnk>